////////////////////////////////////////////////////////////////////////////////
/// OSTIMER.CPP
///
/// Class for kernel-based non-blocking timers
///
///
/// Dr J A Gow 2022
///
////////////////////////////////////////////////////////////////////////////////

#include "ostimer.h"
#include "Arduino.h"

namespace Kernel {

	//
	// NBT class

	////////////////////////////////////////////////////////////////////////
	/// OSTimer
	///
	/// CONSTRUCTOR
	///
	/// Initializes variables for a nonblocking task-time timer
	///
	////////////////////////////////////////////////////////////////////////

	OSTimer::OSTimer(unsigned long timeout=0) : time(timeout), freeze(0), frozen(0)
	{
		time=millis();
	}

	////////////////////////////////////////////////////////////////////////
	/// ~OSTimer
	///
	/// DESTRUCTOR
	///
	/// This doesn't need to do anything as our class isn't dynamically
	/// called.
	///
	////////////////////////////////////////////////////////////////////////

	OSTimer::~OSTimer()
	{
	}

	////////////////////////////////////////////////////////////////////////
	/// Set
	///
	/// Set the timeout to a specific value
	///
	/// @context: TASK
	/// @scope: PUBLIC
	/// @param: unsigned int timeout
	/// @return: none
	///
	////////////////////////////////////////////////////////////////////////

	void OSTimer::Set(unsigned long timeout)
	{
		tmr=millis();
		time=timeout;
	}

	////////////////////////////////////////////////////////////////////////
	/// isExpired
	///
	/// Check if the timer has expired. It may have done some time ago -
	/// this is not interrupt driven
	///
	/// @context: ANY
	/// @scope: PUBLIC
	/// @param: none
	/// @return: int. Nonzero if timer has expired
	///
	////////////////////////////////////////////////////////////////////////

	int OSTimer::isExpired(void)
	{
		return ((millis()-tmr)> time);
	}

	////////////////////////////////////////////////////////////////////////
	/// Freeze
	///
	/// Stop a timer from counting
	///
	/// @context: ANY
	/// @scope: PUBLIC
	/// @param: NONE
	/// @return: NONE
	///
	////////////////////////////////////////////////////////////////////////

	void OSTimer::Freeze(void)
	{
		freeze=millis();
		frozen=1;
	}

	////////////////////////////////////////////////////////////////////////
	/// Thaw
	///
	/// Resume a frozen timer
	///
	/// @context: ANY
	/// @scope: PUBLIC
	/// @param: NONE
	/// @return: NONE
	///
	////////////////////////////////////////////////////////////////////////

	void OSTimer::Thaw(void)
	{
		tmr+=(frozen)?(millis()-freeze):0;
	}

}

